Sample Input 1:
7
1 1
1 2
1 3
2
2
2
3
Sample Output 1:
1 
2 
3
-1

class Queue {
    // Define the data members(if any) here.
    
    public:
    stack<int>s1;
    stack<int>s2;
    Queue() {
        
        // Initialize your data structure here.
    }

    void enQueue(int val) {
        s1.push(val);
        
            
        // Implement the enqueue() function.
    }

    int deQueue() {
        if(s1.empty() && s2.empty())
            return -1;
        else if(s2.empty())
        { 
            while(!s1.empty())
            { 
                s2.push(s1.top());
                s1.pop();
            }
            int y=s2.top();
            s2.pop();
            return y;
            
        }
        else 
        { 
            int y=s2.top();
            s2.pop();
            return y;
        }
        
    }

    int peek() {
        if(s1.empty() && s2.empty())
            return -1;
        else if(s2.empty())
        { 
            while(!s1.empty())
            { 
                s2.push(s1.top());
                s1.pop();
            }
              int y=s2.top();
           // s2.pop();
            return y;
        }
        else 
        { 
            int y=s2.top();
           
            return y;
        }
       
        
        // Implement the peek() function here.
    }

    bool isEmpty() {
         if(s1.empty() && s2.empty())
            return true;
        else 
            return false;
        // Implement the isEmpty() function here.
    }
};
