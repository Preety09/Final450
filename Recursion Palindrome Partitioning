
bool isPalindrome(string S)
{
    // Iterate over the range [0, N/2]
    for (int i = 0; i < S.length() / 2; i++) {
 
        // If S[i] is not equal to
        // the S[N-i-1]
        if (S[i] != S[S.length() - i - 1]) {
            // Return No
            return false;
        }
    }
    // Return "Yes"
    return true;
}
void find(string s,int index,string s1, vector<string>&v,vector<vector<string>>&ans)
{ 
    if(index==s.length())
    { 
        //v.push_back(s1);
        ans.push_back(v);
        
    }
   //v.push_back(s1);
       s1="";
    for(int i=index;i<s.length();i++)
    { 
        s1=s1+s[i];
       
        v.push_back(s1);
        
        find(s,i+1,s1,v,ans);
        v.pop_back();
        
    }
    
    
}
vector<vector<string>> partition(string &s) 
{ 
    vector<vector<string>>ans;
    vector<string>v;
    string s1="";
    find(s,0,s1,v,ans);
    vector<vector<string>>ans1;
    for(int i=0;i<ans.size();i++)
    {
        int y=0;
        vector<string>v1;
        for(int j=0;j<ans[i].size();j++)
        { 
            v1.push_back(ans[i][j]);
            if(isPalindrome(ans[i][j]))
                y++;
            else 
                break;
        }
       // cout<<y<<" "<<ans[i].size()<<endl;
        if(y==ans[i].size())
            ans1.push_back(v1);
            
            
            
        
    }
    return ans1;
    
    // Write your code here.
}
