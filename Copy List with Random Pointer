#include <bits/stdc++.h> 
/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    LinkedListNode<int> *h=head;

   LinkedListNode<int> *ansHead=NULL;

   LinkedListNode<int> *ansTail=NULL;

 

   while(h!=NULL){

       

       //insertAtTail(ansHead,ansTail,h->data);

          LinkedListNode<int> *temp=new LinkedListNode<int>(h->data);

 

   

   if(ansHead==NULL){

       ansHead=temp;

       ansTail=temp;

     

       

   }

   else{

       ansTail->next=temp;

       ansTail=temp;

     

   }

       

       h=h->next;

   }

      LinkedListNode<int> *newhead=ansHead;

   LinkedListNode<int> *h1=head;

LinkedListNode<int> *hd=newhead;

   

   while(h1!=NULL && hd!=NULL){

       hd->data=h1->data;

       h1=h1->next;

       hd=hd->next;

       

   }

   hd=newhead;

   h1=head;

   

   map< LinkedListNode<int>*, LinkedListNode<int>* >m;

   

   while(h1!=NULL && hd!=NULL){

       m[h1]=hd;

       h1=h1->next;

       hd=hd->next;

   }

    LinkedListNode<int> *my=newhead;

    LinkedListNode<int> *org=head;

   while(my!=NULL && org!=NULL){

       my->random=m[org->random];

       my=my->next;

       org=org->next;

   }

   

 return newhead;  
    // Write your code here.
}
