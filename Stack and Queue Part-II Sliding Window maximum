Sample Input 1 :
2
3 1
1 2 2
5 2
4 2 1 4 4
Sample Output 1 :
1 2 2
4 2 4 4

#include<bits/stdc++.h>
vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{  
    int n=nums.size();
    vector<int>v;
    deque<int>q;
    for(int i=0;i<n;i++)
    {
        while(!q.empty() && (nums[i]>nums[q.back()]))
            q.pop_back();
        q.push_back(i);
        if(i>=k-1)
        { 
            v.push_back(nums[q.front()]);
            while(!q.empty() && q.front()<=i-k+1)
                q.pop_front();
                
        }
       
    }
    return v;
    
    //    Write your code here.
}
2nd approach (navie )

vector<int> slidingWindowMaximum(vector<int> &nums, int &k)
{  
    int n=nums.size();
    vector<int>v;
    for(int i=0;i<=n-k;i++)
    {
        //priority_queue<int>q;
        int ma=0;
        for(int j=i;j<k+i;j++)
        { 
            if(nums[j]>ma)
                ma=nums[j];
            
        }
        v.push_back(ma);
    }
    return v;
    
    //    Write your code here.
}
