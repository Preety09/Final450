void dfs(vector<int>&v,vector<int>m[],int y,vector<int>&vis)
{
    vis[y]=1;
    v.push_back(y);
    for(auto it:m[y])
    { 
        if(vis[it]==0)
        {
            vis[it]=1;
            dfs(v,m,it,vis);
            
        }
    }
    return;
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{  
    vector<vector<int>>ans;
    vector<int>m[V];
    for(int i=0;i<E;i++)
    {
        m[edges[i][0]].push_back(edges[i][1]);
         m[edges[i][1]].push_back(edges[i][0]);
        
       
    }
    vector<int>vis(V+1,0);

    
    for(int i=0;i<V;i++)
    {
        if(vis[i]==0)
        {
                vector<int>v;
            dfs(v,m,i,vis);
            sort(v.begin(),v.end());
            ans.push_back(v);
            v.clear();
        }
    }
    return ans;
    
    // Write your code here
}
