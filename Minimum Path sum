#include<bits/stdc++.h>
// int find1(int i,int j,int cost,vector<vector<int>> &grid)
// {
//     int n=grid.size();
//     int m=grid[0].size();
//     if(i==n-1 && j==m-1)
//     { 
//         cost=cost+grid[n-1][m-1];
//         return cost;
//     }
   
//         cost=cost+grid[i][j];
        
//     int a=INT_MAX;
//     int b=INT_MAX;
//     if(i+1<n)
//     {
//         a=grid[i+1][j];
//     }
//     if(j+1<m)
//     {
//          b=grid[i][j+1];
        
//     }
//     if(a>=b)
//     {
//         find1(i,j+1,cost,grid);
//     }
//     else 
//         find1(i+1,j,cost,grid);
// }
// int find(int i,int j,int cost,vector<vector<int>> &grid)
// {
//     if(i==0 && j==0)
//     { 
//         cost=cost+grid[0][0];
//         return cost;
//     }
   
//         cost=cost+grid[i][j];
        
//     int a=INT_MAX;
//     int b=INT_MAX;
//     if(i-1>=0)
//     {
//         a=grid[i-1][j];
//     }
//     if(j-1>=0)
//     {
//          b=grid[i][j-1];
        
//     }
//     if(a>b)
//     {
//         find(i,j-1,cost,grid);
//     }
//     else 
//         find(i-1,j,cost,grid);
// }
int minSumPath(vector<vector<int>> &matrix) {
    int n=matrix.size();
    int m=matrix[0].size();
      vector<int> prev(m,0);
    for(int i=0; i<n ; i++){
        vector<int> temp(m,0);
        for(int j=0; j<m; j++){
            if(i==0 && j==0) temp[j] = matrix[i][j];
            else{
                
                int up = matrix[i][j];
                if(i>0) up += prev[j];
                else up += 1e9;
                
                int left = matrix[i][j];
                if(j>0) left+=temp[j-1];
                else left += 1e9;
                
                temp[j] = min(up,left);
            }
        }
        prev=temp;
    }
    
    return prev[m-1];
    
    
    // Write your code here.
}
