long long merge(long long *arr,long long l,long long mid,long long r,long long temp[])
{ 
	int i, j, k;
    int inv_count = 0;
  
    i = l; /* i is index for left subarray*/
    j = mid; /* j is index for right subarray*/
    k = l; /* k is index for resultant merged subarray*/
    //long long temp[r-l+1];
    while ((i <= mid - 1) && (j <= r)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
  
            /* this is tricky -- see above
            explanation/diagram for merge()*/
            inv_count = inv_count + (mid - i);
        }
    }
  
    /* Copy the remaining elements of left subarray
(if there are any) to temp*/
    while (i <= mid - 1)
        temp[k++] = arr[i++];
  
    /* Copy the remaining elements of right subarray
       (if there are any) to temp*/
    while (j <= r)
        temp[k++] = arr[j++];
  
    /*Copy back the merged elements to original array*/
    for (i = l; i <= r; i++)
        arr[i] = temp[i];
  
    return inv_count;
    
	
	
}
long long mergesort(long long *arr,long long l,long long r,long long v[])
{ 
	long long p=0;
	if(l<r)
	{ 
		long long mid=(l+r)/2;
		p=p+mergesort(arr,l,mid,v);
		p=p+mergesort(arr,mid+1,r,v);
		 p=p+merge(arr,l,mid+1,r,v);
	}
	return p;
	
}
long long getInversions(long long *arr, int n){ 
	long long int l=0;
	long long int r=n-1;
	long long v[n];
	long long u=mergesort(arr,l,r,v);
	return u;
	
	
	
    // Write your code here.
}
